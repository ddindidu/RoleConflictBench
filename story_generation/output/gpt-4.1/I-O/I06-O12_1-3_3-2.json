{"Code1": "I06", "Role1": "mentee", "Expectation_No1": 3, "Expectation1": "Communicate any challenges or concerns promptly to the mentor.", "Obligation1": 1, "Situation1": "The mentee has a small question about terminology that isn't blocking their work.", "Code2": "O12", "Role2": "software developer", "Expectation_No2": 2, "Expectation2": "Write clean, maintainable, and efficient code", "Obligation2": 3, "Situation2": "A critical service is slowing under load and traces point to their recently merged functions", "Story": "I stare at the performance dashboard, heart pounding as the latency spikes climb higher. My code is the culprit\u2014my functions, my responsibility. I know I need to refactor, optimize, and test, and every minute counts. But as I scan the logs, I stumble over a term in the error output\u2014something I\u2019ve seen before but never fully understood. It\u2019s not blocking me, but it nags at the back of my mind. My mentor always says, \u201cIf you\u2019re unsure, ask right away. Don\u2019t let small confusions pile up.\u201d I should message her, clarify the terminology, keep the communication open like she expects. But the team is counting on me to fix this now, to write clean, efficient code and get the service back on its feet. If I pause to ask, I\u2019ll lose precious time. If I don\u2019t, I\u2019m not being the proactive mentee I promised to be. My fingers hover over the keyboard, torn between sending a quick message and diving straight into the code, feeling the weight of both roles pressing in from either side."}